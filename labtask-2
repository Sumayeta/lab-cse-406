class Process:
    def __init__(self, id, at, bt):
        self.id = id
        self.at = at
        self.bt = bt
        self.ct = 0
        self.tat = 0
        self.wt = 0
        self.done = False 

    def calculate_times(self, ct):
        self.ct = ct
        self.tat = self.ct - self.at
        self.wt = self.tat - self.bt

    def display(self):
        print(f"{self.id}\t{self.at}\t{self.bt}\t{self.ct}\t{self.tat}\t{self.wt}")

    def waiting(self):
        return self.wt

num = int(input("Enter the Number of Processes: "))
processes = []

for i in range(num):
    print(f'Process {i+1}')
    at = int(input("Enter the Arrival Time: "))
    bt = int(input("Enter the Burst Time: "))
    processes.append(Process(i, at, bt))
    print("\n")
current_time = 0
completed = 0
avg_wt = 0

print("PID\tAT\tBT\tCT\tTAT\tWT")

while completed < num:
    available = [p for p in processes if p.at <= current_time and not p.done]
    
    if not available:
        current_time += 1 
        continue

    next_process = min(available, key=lambda x: x.bt)
    
    current_time += next_process.bt
    next_process.calculate_times(current_time)
    next_process.done = True
    completed += 1
    next_process.display()
    avg_wt += next_process.waiting()

print(f"\nAverage Waiting Time: {avg_wt / num:.2f}")
